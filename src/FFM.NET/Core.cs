// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Core
{
    namespace Ffm
    {
        public unsafe partial class FfmNode : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public int f;

                [FieldOffset(4)]
                public int j;

                [FieldOffset(8)]
                public float v;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0ffm_node@ffm@@QEAA@AEBU01@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmNode>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Core.Ffm.FfmNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new FfmNode(native.ToPointer(), skipVTables);
            }

            internal static global::Core.Ffm.FfmNode __CreateInstance(global::Core.Ffm.FfmNode.__Internal native, bool skipVTables = false)
            {
                return new FfmNode(native, skipVTables);
            }

            private static void* __CopyValue(global::Core.Ffm.FfmNode.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmNode.__Internal)));
                *(global::Core.Ffm.FfmNode.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private FfmNode(global::Core.Ffm.FfmNode.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected FfmNode(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public FfmNode()
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmNode.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public FfmNode(global::Core.Ffm.FfmNode _0)
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmNode.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::Core.Ffm.FfmNode.__Internal*) __Instance) = *((global::Core.Ffm.FfmNode.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::Core.Ffm.FfmNode __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public int F
            {
                get
                {
                    return ((global::Core.Ffm.FfmNode.__Internal*) __Instance)->f;
                }

                set
                {
                    ((global::Core.Ffm.FfmNode.__Internal*) __Instance)->f = value;
                }
            }

            public int J
            {
                get
                {
                    return ((global::Core.Ffm.FfmNode.__Internal*) __Instance)->j;
                }

                set
                {
                    ((global::Core.Ffm.FfmNode.__Internal*) __Instance)->j = value;
                }
            }

            public float V
            {
                get
                {
                    return ((global::Core.Ffm.FfmNode.__Internal*) __Instance)->v;
                }

                set
                {
                    ((global::Core.Ffm.FfmNode.__Internal*) __Instance)->v = value;
                }
            }
        }

        public unsafe partial class FfmProblem : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 40)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public int n;

                [FieldOffset(4)]
                public int l;

                [FieldOffset(8)]
                public int m;

                [FieldOffset(16)]
                public global::System.IntPtr X;

                [FieldOffset(24)]
                public global::System.IntPtr P;

                [FieldOffset(32)]
                public global::System.IntPtr Y;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0ffm_problem@ffm@@QEAA@AEBU01@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmProblem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmProblem>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Core.Ffm.FfmProblem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new FfmProblem(native.ToPointer(), skipVTables);
            }

            internal static global::Core.Ffm.FfmProblem __CreateInstance(global::Core.Ffm.FfmProblem.__Internal native, bool skipVTables = false)
            {
                return new FfmProblem(native, skipVTables);
            }

            private static void* __CopyValue(global::Core.Ffm.FfmProblem.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmProblem.__Internal)));
                *(global::Core.Ffm.FfmProblem.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private FfmProblem(global::Core.Ffm.FfmProblem.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected FfmProblem(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public FfmProblem()
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmProblem.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public FfmProblem(global::Core.Ffm.FfmProblem _0)
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmProblem.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::Core.Ffm.FfmProblem.__Internal*) __Instance) = *((global::Core.Ffm.FfmProblem.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::Core.Ffm.FfmProblem __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public int N
            {
                get
                {
                    return ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->n;
                }

                set
                {
                    ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->n = value;
                }
            }

            public int L
            {
                get
                {
                    return ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->l;
                }

                set
                {
                    ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->l = value;
                }
            }

            public int M
            {
                get
                {
                    return ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->m;
                }

                set
                {
                    ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->m = value;
                }
            }

            public global::Core.Ffm.FfmNode X
            {
                get
                {
                    global::Core.Ffm.FfmNode __result0;
                    if (((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->X == IntPtr.Zero) __result0 = null;
                    else if (global::Core.Ffm.FfmNode.NativeToManagedMap.ContainsKey(((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->X))
                        __result0 = (global::Core.Ffm.FfmNode) global::Core.Ffm.FfmNode.NativeToManagedMap[((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->X];
                    else __result0 = global::Core.Ffm.FfmNode.__CreateInstance(((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->X);
                    return __result0;
                }

                set
                {
                    ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->X = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public long* P
            {
                get
                {
                    return (long*) ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->P;
                }

                set
                {
                    ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->P = (global::System.IntPtr) value;
                }
            }

            public float* Y
            {
                get
                {
                    return (float*) ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->Y;
                }

                set
                {
                    ((global::Core.Ffm.FfmProblem.__Internal*) __Instance)->Y = (global::System.IntPtr) value;
                }
            }
        }

        public unsafe partial class FfmModel : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public int n;

                [FieldOffset(4)]
                public int m;

                [FieldOffset(8)]
                public int k;

                [FieldOffset(16)]
                public global::System.IntPtr W;

                [FieldOffset(24)]
                public byte normalization;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0ffm_model@ffm@@QEAA@AEBU01@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmModel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmModel>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Core.Ffm.FfmModel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new FfmModel(native.ToPointer(), skipVTables);
            }

            internal static global::Core.Ffm.FfmModel __CreateInstance(global::Core.Ffm.FfmModel.__Internal native, bool skipVTables = false)
            {
                return new FfmModel(native, skipVTables);
            }

            private static void* __CopyValue(global::Core.Ffm.FfmModel.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmModel.__Internal)));
                *(global::Core.Ffm.FfmModel.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private FfmModel(global::Core.Ffm.FfmModel.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected FfmModel(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public FfmModel()
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmModel.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public FfmModel(global::Core.Ffm.FfmModel _0)
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmModel.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::Core.Ffm.FfmModel.__Internal*) __Instance) = *((global::Core.Ffm.FfmModel.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::Core.Ffm.FfmModel __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public int N
            {
                get
                {
                    return ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->n;
                }

                set
                {
                    ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->n = value;
                }
            }

            public int M
            {
                get
                {
                    return ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->m;
                }

                set
                {
                    ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->m = value;
                }
            }

            public int K
            {
                get
                {
                    return ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->k;
                }

                set
                {
                    ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->k = value;
                }
            }

            public float* W
            {
                get
                {
                    return (float*) ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->W;
                }

                set
                {
                    ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->W = (global::System.IntPtr) value;
                }
            }

            public bool Normalization
            {
                get
                {
                    return ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->normalization != 0;
                }

                set
                {
                    ((global::Core.Ffm.FfmModel.__Internal*) __Instance)->normalization = (byte) (value ? 1 : 0);
                }
            }
        }

        public unsafe partial class FfmParameter : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public float eta;

                [FieldOffset(4)]
                public float lambda;

                [FieldOffset(8)]
                public int nr_iters;

                [FieldOffset(12)]
                public int k;

                [FieldOffset(16)]
                public int nr_threads;

                [FieldOffset(20)]
                public byte quiet;

                [FieldOffset(21)]
                public byte normalization;

                [FieldOffset(22)]
                public byte random;

                [FieldOffset(23)]
                public byte auto_stop;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0ffm_parameter@ffm@@QEAA@AEBU01@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmParameter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Core.Ffm.FfmParameter>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Core.Ffm.FfmParameter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new FfmParameter(native.ToPointer(), skipVTables);
            }

            internal static global::Core.Ffm.FfmParameter __CreateInstance(global::Core.Ffm.FfmParameter.__Internal native, bool skipVTables = false)
            {
                return new FfmParameter(native, skipVTables);
            }

            private static void* __CopyValue(global::Core.Ffm.FfmParameter.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmParameter.__Internal)));
                *(global::Core.Ffm.FfmParameter.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private FfmParameter(global::Core.Ffm.FfmParameter.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected FfmParameter(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public FfmParameter()
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmParameter.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public FfmParameter(global::Core.Ffm.FfmParameter _0)
            {
                __Instance = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(global::Core.Ffm.FfmParameter.__Internal)));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::Core.Ffm.FfmParameter.__Internal*) __Instance) = *((global::Core.Ffm.FfmParameter.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::Core.Ffm.FfmParameter __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public float Eta
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->eta;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->eta = value;
                }
            }

            public float Lambda
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->lambda;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->lambda = value;
                }
            }

            public int NrIters
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->nr_iters;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->nr_iters = value;
                }
            }

            public int K
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->k;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->k = value;
                }
            }

            public int NrThreads
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->nr_threads;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->nr_threads = value;
                }
            }

            public bool Quiet
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->quiet != 0;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->quiet = (byte) (value ? 1 : 0);
                }
            }

            public bool Normalization
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->normalization != 0;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->normalization = (byte) (value ? 1 : 0);
                }
            }

            public bool Random
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->random != 0;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->random = (byte) (value ? 1 : 0);
                }
            }

            public bool AutoStop
            {
                get
                {
                    return ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->auto_stop != 0;
                }

                set
                {
                    ((global::Core.Ffm.FfmParameter.__Internal*) __Instance)->auto_stop = (byte) (value ? 1 : 0);
                }
            }
        }

        public unsafe partial class ffm
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_read_problem")]
                internal static extern global::System.IntPtr FfmReadProblem_0([MarshalAs(UnmanagedType.LPStr)] string path);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_read_problem_to_disk")]
                internal static extern int FfmReadProblemToDisk_0([MarshalAs(UnmanagedType.LPStr)] string txt_path, [MarshalAs(UnmanagedType.LPStr)] string bin_path);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_destroy_problem")]
                internal static extern void FfmDestroyProblem_0(global::System.IntPtr prob);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_save_model")]
                internal static extern int FfmSaveModel_0(global::System.IntPtr model, [MarshalAs(UnmanagedType.LPStr)] string path);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_load_model")]
                internal static extern global::System.IntPtr FfmLoadModel_0([MarshalAs(UnmanagedType.LPStr)] string path);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_destroy_model")]
                internal static extern void FfmDestroyModel_0(global::System.IntPtr model);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_get_default_param")]
                internal static extern void FfmGetDefaultParam_0(global::System.IntPtr @return);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_train_with_validation")]
                internal static extern global::System.IntPtr FfmTrainWithValidation_0(global::System.IntPtr Tr, global::System.IntPtr Va, global::Core.Ffm.FfmParameter.__Internal param);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_train")]
                internal static extern global::System.IntPtr FfmTrain_0(global::System.IntPtr prob, global::Core.Ffm.FfmParameter.__Internal param);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_train_with_validation_on_disk")]
                internal static extern global::System.IntPtr FfmTrainWithValidationOnDisk_0([MarshalAs(UnmanagedType.LPStr)] string Tr_path, [MarshalAs(UnmanagedType.LPStr)] string Va_path, global::Core.Ffm.FfmParameter.__Internal param);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_train_on_disk")]
                internal static extern global::System.IntPtr FfmTrainOnDisk_0([MarshalAs(UnmanagedType.LPStr)] string path, global::Core.Ffm.FfmParameter.__Internal param);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_predict")]
                internal static extern float FfmPredict_0(global::System.IntPtr begin, global::System.IntPtr end, global::System.IntPtr model);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Core", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="ffm_cross_validation")]
                internal static extern float FfmCrossValidation_0(global::System.IntPtr prob, int nr_folds, global::Core.Ffm.FfmParameter.__Internal param);
            }

            public static global::Core.Ffm.FfmProblem FfmReadProblem(string path)
            {
                var __ret = __Internal.FfmReadProblem_0(path);
                global::Core.Ffm.FfmProblem __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::Core.Ffm.FfmProblem.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::Core.Ffm.FfmProblem) global::Core.Ffm.FfmProblem.NativeToManagedMap[__ret];
                else __result0 = global::Core.Ffm.FfmProblem.__CreateInstance(__ret);
                return __result0;
            }

            public static int FfmReadProblemToDisk(string txt_path, string bin_path)
            {
                var __ret = __Internal.FfmReadProblemToDisk_0(txt_path, bin_path);
                return __ret;
            }

            public static void FfmDestroyProblem(global::Core.Ffm.FfmProblem prob)
            {
                var __arg0 = ReferenceEquals(prob, null) ? global::System.IntPtr.Zero : prob.__Instance;
                __Internal.FfmDestroyProblem_0(__arg0);
            }

            public static int FfmSaveModel(global::Core.Ffm.FfmModel model, string path)
            {
                var __arg0 = ReferenceEquals(model, null) ? global::System.IntPtr.Zero : model.__Instance;
                var __ret = __Internal.FfmSaveModel_0(__arg0, path);
                return __ret;
            }

            public static global::Core.Ffm.FfmModel FfmLoadModel(string path)
            {
                var __ret = __Internal.FfmLoadModel_0(path);
                global::Core.Ffm.FfmModel __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::Core.Ffm.FfmModel.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::Core.Ffm.FfmModel) global::Core.Ffm.FfmModel.NativeToManagedMap[__ret];
                else __result0 = global::Core.Ffm.FfmModel.__CreateInstance(__ret);
                return __result0;
            }

            public static void FfmDestroyModel(global::Core.Ffm.FfmModel model)
            {
                var __arg0 = ReferenceEquals(model, null) ? global::System.IntPtr.Zero : model.__Instance;
                __Internal.FfmDestroyModel_0(__arg0);
            }

            public static global::Core.Ffm.FfmParameter FfmGetDefaultParam()
            {
                var __ret = new global::Core.Ffm.FfmParameter.__Internal();
                __Internal.FfmGetDefaultParam_0(new IntPtr(&__ret));
                return global::Core.Ffm.FfmParameter.__CreateInstance(__ret);
            }

            public static global::Core.Ffm.FfmModel FfmTrainWithValidation(global::Core.Ffm.FfmProblem Tr, global::Core.Ffm.FfmProblem Va, global::Core.Ffm.FfmParameter param)
            {
                var __arg0 = ReferenceEquals(Tr, null) ? global::System.IntPtr.Zero : Tr.__Instance;
                var __arg1 = ReferenceEquals(Va, null) ? global::System.IntPtr.Zero : Va.__Instance;
                var __arg2 = ReferenceEquals(param, null) ? new global::Core.Ffm.FfmParameter.__Internal() : *(global::Core.Ffm.FfmParameter.__Internal*) param.__Instance;
                var __ret = __Internal.FfmTrainWithValidation_0(__arg0, __arg1, __arg2);
                global::Core.Ffm.FfmModel __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::Core.Ffm.FfmModel.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::Core.Ffm.FfmModel) global::Core.Ffm.FfmModel.NativeToManagedMap[__ret];
                else __result0 = global::Core.Ffm.FfmModel.__CreateInstance(__ret);
                return __result0;
            }

            public static global::Core.Ffm.FfmModel FfmTrain(global::Core.Ffm.FfmProblem prob, global::Core.Ffm.FfmParameter param)
            {
                var __arg0 = ReferenceEquals(prob, null) ? global::System.IntPtr.Zero : prob.__Instance;
                var __arg1 = ReferenceEquals(param, null) ? new global::Core.Ffm.FfmParameter.__Internal() : *(global::Core.Ffm.FfmParameter.__Internal*) param.__Instance;
                var __ret = __Internal.FfmTrain_0(__arg0, __arg1);
                global::Core.Ffm.FfmModel __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::Core.Ffm.FfmModel.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::Core.Ffm.FfmModel) global::Core.Ffm.FfmModel.NativeToManagedMap[__ret];
                else __result0 = global::Core.Ffm.FfmModel.__CreateInstance(__ret);
                return __result0;
            }

            public static global::Core.Ffm.FfmModel FfmTrainWithValidationOnDisk(string Tr_path, string Va_path, global::Core.Ffm.FfmParameter param)
            {
                var __arg2 = ReferenceEquals(param, null) ? new global::Core.Ffm.FfmParameter.__Internal() : *(global::Core.Ffm.FfmParameter.__Internal*) param.__Instance;
                var __ret = __Internal.FfmTrainWithValidationOnDisk_0(Tr_path, Va_path, __arg2);
                global::Core.Ffm.FfmModel __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::Core.Ffm.FfmModel.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::Core.Ffm.FfmModel) global::Core.Ffm.FfmModel.NativeToManagedMap[__ret];
                else __result0 = global::Core.Ffm.FfmModel.__CreateInstance(__ret);
                return __result0;
            }

            public static global::Core.Ffm.FfmModel FfmTrainOnDisk(string path, global::Core.Ffm.FfmParameter param)
            {
                var __arg1 = ReferenceEquals(param, null) ? new global::Core.Ffm.FfmParameter.__Internal() : *(global::Core.Ffm.FfmParameter.__Internal*) param.__Instance;
                var __ret = __Internal.FfmTrainOnDisk_0(path, __arg1);
                global::Core.Ffm.FfmModel __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::Core.Ffm.FfmModel.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::Core.Ffm.FfmModel) global::Core.Ffm.FfmModel.NativeToManagedMap[__ret];
                else __result0 = global::Core.Ffm.FfmModel.__CreateInstance(__ret);
                return __result0;
            }

            public static float FfmPredict(global::Core.Ffm.FfmNode begin, global::Core.Ffm.FfmNode end, global::Core.Ffm.FfmModel model)
            {
                var __arg0 = ReferenceEquals(begin, null) ? global::System.IntPtr.Zero : begin.__Instance;
                var __arg1 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
                var __arg2 = ReferenceEquals(model, null) ? global::System.IntPtr.Zero : model.__Instance;
                var __ret = __Internal.FfmPredict_0(__arg0, __arg1, __arg2);
                return __ret;
            }

            public static float FfmCrossValidation(global::Core.Ffm.FfmProblem prob, int nr_folds, global::Core.Ffm.FfmParameter param)
            {
                var __arg0 = ReferenceEquals(prob, null) ? global::System.IntPtr.Zero : prob.__Instance;
                var __arg2 = ReferenceEquals(param, null) ? new global::Core.Ffm.FfmParameter.__Internal() : *(global::Core.Ffm.FfmParameter.__Internal*) param.__Instance;
                var __ret = __Internal.FfmCrossValidation_0(__arg0, nr_folds, __arg2);
                return __ret;
            }
        }
    }
}
